import { app, BrowserWindow, ipcMain } from "electron";
import fs from "fs";
import path from "path";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

ipcMain.on("save-text-file", (event, filename, content) => {
  const filePath = path.join(app.getPath("documents"), filename);
  fs.writeFile(filePath, content, (err) => {
    if (err) {
      console.error("Failed to save file:", err);
    } else {
      console.log("File saved successfully:", filePath);
    }
  });
});

/**
 * Saves the provided content as a JSON file in the user's Documents folder.
 *
 * @param {Electron.IpcMainEvent} event - The IPC event triggering this function (unused).
 * @param {Record<string, unknown>} content - The JSON object to save, containing date, mood, and content.
 *
 * @returns {void} - No return value. Logs success or error to the console.
 *
 * @example
 * ipcMain.on("save-json-file", (event, data) => {
 *   saveJSONFile(event, data);
 * });
 *
 */
ipcMain.on("save-json-file", (event, entry) => {
  console.log(entry)
  try {
    // Produce file path for journal.json inside user's documents folder
    const filePath = path.join(app.getPath("documents"), "journal.json");
    type JournalType = { [date: string]: {mood: string; content: string}}
    let journal : JournalType = {};

    // If file exists, parse the data within
    if (fs.existsSync(filePath)) {
      // Synchronously read file 
      const file = fs.readFileSync(filePath,"utf-8");
      journal = JSON.parse(file) as JournalType;
      console.log(journal);
    }

    // Add new entry data to existing journal data // will  cause overwrite if existing date
    const entryDate = Object.keys(entry)[0];
    const entryData = entry[entryDate];
    journal[entryDate] = entryData;

    // Write file with new entry
    fs.writeFileSync(filePath,JSON.stringify(journal, null, 2));
    console.log("Wrote content to %s successfully", filePath);

    // Verify file is updated with new entry
    console.log("Validating:");
    var newFile = fs.readFileSync(filePath,"utf-8");
    console.log(JSON.parse(newFile));

  } catch (err) {
    console.error("Error writing data:", err);
  }
})

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
